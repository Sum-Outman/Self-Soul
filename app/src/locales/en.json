{
  "main": {
    "title": "AGI Brain System",
    "tabs": {
      "interaction": "Interaction",
      "training": "Training",
      "management": "Management",
      "settings": "Settings",
      "help": "Help",
      "monitor": "Monitor",
      "knowledge": "Knowledge"
    },
    "status": {
      "system": "System Status",
      "connected": "Connected",
      "disconnected": "Disconnected",
      "error": "Error"
    },
    "connectionStatus": "Connection Status",
    "trainingInProgress": "Training in Progress"
  },
  "language": {
    "chinese": "Chinese",
    "english": "English",
    "german": "German",
    "japanese": "Japanese",
    "russian": "Russian",
    "switchLanguage": "Switch Language"
  },
  "interaction": {
    "title": "Intelligent Dialogue",
    "placeholder": "Please enter your question or command...",
    "voiceInput": "Voice Input",
    "send": "Send",
    "clear": "Clear",
    "emotionAnalysis": "Emotion Analysis",
    "multimodalInput": "Multimodal Input",
    "voice": "Voice",
    "listening": "Listening",
    "camera": "Camera",
    "recording": "Recording",
    "sensors": "Sensors",
    "active": "Active",
    "cameraFeed": "Camera Feed",
    "sensorData": "Sensor Data",
    "modelControl": "Model Control",
    "startCollaboration": "Start Collaboration"
  },
    "training": {
        "title": "Training Control Panel",
        "trainingMode": "Training Mode",
        "individual": "Individual Training",
        "joint": "Joint Training",
        "selectModels": "Select Models for Training",
        "recommendedCombinations": "Recommended Combinations",
        "combinationValid": "Combination validated",
        "dependencies": "Model Dependencies",
        "trainingStrategy": "Training Strategy",
        "trainingOptions": "Training Options",
        "strategy": "Strategy",
        "strategyStandard": "Standard Strategy",
        "strategyKnowledge": "Knowledge Strategy",
        "strategyProgressive": "Progressive Strategy",
        "strategyAdaptive": "Adaptive Strategy",
        "knowledgeAssist": "Knowledge Assist",
        "knowledgeAssistOptions": "Knowledge Assist Options",
        "domainKnowledge": "Domain Knowledge",
        "commonSense": "Common Sense",
        "proceduralKnowledge": "Procedural Knowledge",
        "contextualLearning": "Contextual Learning",
        "knowledgeIntensity": "Knowledge Intensity",
        "dataset": "Dataset",
        "uploadDataset": "Upload Dataset",
        "parameters": "Parameters",
        "epochs": "Epochs",
        "batchSize": "Batch Size",
        "learningRate": "Learning Rate",
        "validationSplit": "Validation Split",
        "startTraining": "Start Training",
        "trainingInProgress": "Training in Progress",
        "stopTraining": "Stop Training",
        "progress": "Progress",
        "logs": "Logs",
        "evaluation": "Evaluation",
        "accuracy": "Accuracy",
        "loss": "Loss",
        "precision": "Precision",
        "recall": "Recall",
        "confusionMatrix": "Confusion Matrix",
        "history": "History",
        "date": "Date",
        "models": "Models",
        "duration": "Duration",
        "actions": "Actions",
        "view": "View",
        "compare": "Compare",
        "trainingCompleted": "Training completed successfully",
        "trainingStopped": "Training stopped",
        "trainingTime": "Training Time",
        "performanceMetrics": "Performance Metrics",
        "loadRecommendations": "Load Recommendations",
        "datasets": {
            "multimodal_v1": "Multimodal Dataset v1",
            "language_only": "Language Only Dataset",
            "vision_only": "Vision Only Dataset",
            "sensor_only": "Sensor Only Dataset"
        },
        "strategies": {
            "standard": "Standard Strategy",
            "knowledge_assisted": "Knowledge Assisted Strategy",
            "progressive": "Progressive Strategy",
            "adaptive": "Adaptive Strategy"
        },
        "combinations": {
            "basic_interaction": "Basic Interaction Combination",
            "visual_processing": "Visual Processing Combination",
            "sensor_analysis": "Sensor Analysis Combination",
            "knowledge_intensive": "Knowledge Intensive Combination",
            "specialized_domains": "Specialized Domains Combination",
            "emotional_intelligence": "Emotional Intelligence Combination",
            "complete_system": "Complete System Combination",
            "autonomous_control": "Autonomous Control Combination",
            "cognitive_processing": "Cognitive Processing Combination",
            "multimodal_perception": "Multimodal Perception Combination"
        },
        "requiresModels": "Requires models: {models}",
        "missingDependencies": "Missing dependencies: {details}",
        "websocketConnected": "WebSocket connection established",
        "websocketDisconnected": "WebSocket connection disconnected",
        "trainingStarted": "Training started - Mode: {mode}, Models: {models}, Dataset: {dataset}",
        "epochCompleted": "Epoch completed - Epoch: {epoch}, Loss: {loss}, Accuracy: {accuracy}%",
        "datasetUploadSuccess": "Dataset uploaded successfully: {name}",
        "dropoutRate": "Dropout Rate",
        "weightDecay": "Weight Decay",
        "momentum": "Momentum",
        "optimizer": "Optimizer"
    },
  "management": {
    "title": "Model Management",
    "localModels": "Local Models",
    "externalModels": "External API Models",
    "configure": "Configure",
    "testConnection": "Test Connection",
    "addExternalModel": "Add External Model",
    "status": "Status",
    "active": "Active",
    "inactive": "Inactive",
    "disable": "Disable",
    "enable": "Enable",
    "localConfig": "Local Configuration",
    "modelVersion": "Model Version",
    "enterVersion": "Enter version",
    "trainingDataPath": "Training Data Path",
    "enterDataPath": "Enter data path",
    "externalConfig": "External Configuration",
    "externalModel": "External Model",
    "modelName": "Model Name",
    "enterModelName": "Enter model name",
    "apiEndpoint": "API Endpoint",
    "enterApiEndpoint": "Enter API endpoint",
    "apiKey": "API Key",
    "enterApiKey": "Enter API key",
    "modelType": "Model Type",
    "custom": "Custom",
    "saveConfig": "Save Configuration",
    "delete": "Delete",
    "enableThisModel": "Enable this model",
    "noExternalModels": "No external models",
    "connectionSuccess": "Connection successful",
    "connectionFailed": "Connection failed",
    "connectionError": "Connection error",
    "configSaved": "Configuration saved",
    "disconnected": "Disconnected",
    "testing": "Testing",
    "connected": "Connected",
    "failed": "Failed",
    "error": "Error",
    "unknown": "Unknown",
    "memoryUsage": "Memory Usage",
    "cpuUsage": "CPU Usage",
    "lastActivity": "Last Activity",
    "loadedTime": "Loaded Time",
    "neverActive": "Never Active",
    "justNow": "Just Now",
    "minutesAgo": "minutes ago",
    "hoursAgo": "hours ago",
    "notLoaded": "Not Loaded",
    "initialized": "Initialized",
    "yes": "Yes",
    "no": "No",
    "trainingStatus": "Training Status",
    "training": "Training",
    "idle": "Idle",
    "fetchingStatus": "Fetching model status...",
    "statusUpdated": "Status updated successfully",
    "statusFetchFailed": "Failed to fetch status",
    "endpointRequired": "API endpoint is required",
    "testingConnection": "Testing connection...",
    "nameAndEndpointRequired": "Model name and endpoint are required",
    "savingConfig": "Saving configuration..."
  },
  "settings": {
    "title": "System Settings",
    "modelConfig": "Model Configuration",
    "localModel": "Local Model",
    "apiModel": "API Model",
    "apiUrl": "API URL",
    "apiKey": "API Key",
    "testConnection": "Test Connection",
    "systemSettings": "System Settings",
    "dataRetention": "Data Retention",
    "days": "days",
    "autoUpdate": "Auto Update",
    "logLevel": "Log Level",
    "save": "Save Settings",
    "saved": "Settings saved successfully",
    "fillApiFields": "Please fill in all API fields",
    "connectionSuccess": "Connection successful",
    "connectionFailed": "Connection failed",
    "saveFailed": "Save failed",
    "general": "General Settings",
    "audio": "Audio Settings",
    "video": "Video Settings",
    "sensors": "Sensor Settings",
    "reset": "Reset to Default"
  },
  "help": {
    "title": "",
    "subtitle": "",
    "sections": {
      "introduction": "System Introduction",
      "quickstart": "Quick Start",
      "models": "Model Guide",
      "training": "Training Guide",
      "troubleshooting": "Troubleshooting",
      "advanced": "Advanced Features"
    },
    "introduction": {
      "content1": "Self Soul  is a revolutionary human-brain-like AGI system with independent thinking, autonomous learning, self-optimization, and self-upgrading capabilities.",
      "content2": "The system adopts a multimodal architecture, integrating language, vision, audio, sensors, and other perceptual capabilities to achieve true artificial general intelligence."
    },
    "features": {
      "brain": {
        "title": "Human-Brain Intelligence",
        "description": "Emotion analysis, reasoning capabilities, and self-awareness, enabling human-like thinking and decision-making"
      },
      "vision": {
        "title": "Visual Processing",
        "description": "Powerful image and video recognition, generation, and editing capabilities with real-time visual analysis"
      },
      "audio": {
        "title": "Audio Processing",
        "description": "Speech recognition, music synthesis, multi-band audio analysis, and special effects sound generation"
      },
      "knowledge": {
        "title": "Knowledge Base System",
        "description": "Comprehensive knowledge system covering physics, mathematics, chemistry, medicine, and various other fields"
      }
    },
    "quickstart": {
      "step1": {
        "title": "System Startup",
        "description": "Run the startup script to launch the AGI system, ensuring all dependencies are properly installed"
      },
      "step2": {
        "title": "Model Configuration",
        "description": "Configure local models or connect external API models in the model management interface"
      },
      "step3": {
        "title": "Start Interaction",
        "description": "Use the interaction interface to communicate with the system, supporting text, voice, and image multimodal input"
      },
      "step4": {
        "title": "Training Optimization",
        "description": "Conduct model training based on requirements to improve system performance and intelligence level"
      }
    },
    "models": {
      "manager": {
        "title": "Manager Model",
        "description": "Core coordination model responsible for task allocation, emotion analysis, and multi-model collaboration",
        "features": {
          "emotion": "Emotion Analysis",
          "coordination": "Coordination Capability",
          "communication": "Communication Management"
        }
      },
      "language": {
        "title": "Language Model",
        "description": "Multilingual interaction and emotional reasoning, supporting complex conversations and text generation",
        "features": {
          "multilingual": "Multilingual Support",
          "reasoning": "Reasoning Capability",
          "generation": "Text Generation"
        }
      },
      "audio": {
        "title": "Audio Model",
        "description": "Speech recognition, audio synthesis, and music processing with multi-band analysis support",
        "features": {
          "recognition": "Speech Recognition",
          "synthesis": "Audio Synthesis",
          "processing": "Audio Processing"
        }
      },
      "vision": {
        "title": "Vision Model",
        "description": "Image recognition, content modification, and generation with semantic and emotion-driven visual processing",
        "features": {
          "recognition": "Image Recognition",
          "generation": "Image Generation",
          "editing": "Image Editing"
        }
      },
      "video": {
        "title": "Video Model",
        "description": "Video content analysis, editing, and generation with real-time video stream processing",
        "features": {
          "analysis": "Video Analysis",
          "editing": "Video Editing",
          "generation": "Video Generation"
        }
      },
      "spatial": {
        "title": "Spatial Model",
        "description": "Spatial recognition, localization, and modeling with stereo vision and motion analysis support",
        "features": {
          "mapping": "Spatial Mapping",
          "localization": "Localization Capability",
          "navigation": "Navigation Function"
        }
      },
      "sensor": {
        "title": "Sensor Model",
        "description": "Multi-sensor data fusion and analysis with environmental perception and monitoring support",
        "features": {
          "data": "Data Processing",
          "fusion": "Data Fusion",
          "monitoring": "Real-time Monitoring"
        }
      },
      "computer": {
        "title": "Computer Control Model",
        "description": "System control and automation with multi-platform compatibility and MCP integration",
        "features": {
          "control": "System Control",
          "automation": "Automation",
          "integration": "Integration Capability"
        }
      },
      "motion": {
        "title": "Motion Control Model",
        "description": "Motion planning and execution control with multi-port output and external device control",
        "features": {
          "control": "Motion Control",
          "planning": "Path Planning",
          "execution": "Execution Capability"
        }
      },
      "knowledge": {
        "title": "Knowledge Model",
        "description": "Knowledge retrieval, reasoning, and learning with expertise across various academic fields",
        "features": {
          "retrieval": "Knowledge Retrieval",
          "reasoning": "Reasoning Capability",
          "learning": "Learning Capability"
        }
      },
      "programming": {
        "title": "Programming Model",
        "description": "Code generation, debugging, and optimization with autonomous programming and system improvement support",
        "features": {
          "coding": "Code Writing",
          "debugging": "Debugging Capability",
          "optimization": "Performance Optimization"
        }
      }
    },
    "training": {
      "types": {
        "title": "Training Types",
        "individual": "Individual Training",
        "individual_desc": "Specialized training for individual models to enhance specific capabilities",
        "joint": "Joint Training",
        "joint_desc": "Collaborative training of multiple models to improve overall coordination capabilities",
        "continuous": "Continuous Training",
        "continuous_desc": "Continuous system learning and optimization to constantly improve intelligence level"
      },
      "best_practices": {
        "title": "Best Practices",
        "practice1": "Start with basic combinations and gradually increase complexity",
        "practice2": "Regularly conduct knowledge-assisted training to enhance reasoning capabilities",
        "practice3": "Use multimodal datasets for joint training",
        "practice4": "Monitor training process and adjust parameters and strategies promptly"
      }
    },
    "troubleshooting": {
      "voice_not_working": {
        "question": "Voice input not working",
        "answer": "Check microphone permissions and audio settings, ensure browser has microphone access"
      },
      "camera_access": {
        "question": "Camera access denied",
        "answer": "Check camera permissions, ensure browser has camera access, and verify hardware connections"
      },
      "model_not_responding": {
        "question": "Model not responding",
        "answer": "Check model status and connections, try restarting model or checking network connection"
      },
      "training_failed": {
        "question": "Training failed",
        "answer": "Check dataset format and model dependencies, ensure all required models are properly configured"
      },
      "performance_issues": {
        "question": "Performance issues",
        "answer": "Check system resource usage, may need to optimize model configuration or upgrade hardware"
      },
      "connection_problems": {
        "question": "Connection problems",
        "answer": "Check network connection and API configuration, ensure endpoint address and keys are correct"
      }
    },
    "advanced": {
      "realtime": {
        "title": "Real-time Processing",
        "description": "Support for real-time audio and video stream processing with low-latency multimodal interaction"
      },
      "api": {
        "title": "API Integration",
        "description": "Rich API interfaces supporting custom integration and third-party service connections"
      },
      "monitoring": {
        "title": "Monitoring Dashboard",
        "description": "Real-time system monitoring and performance analysis with visual model status display"
      },
      "integration": {
        "title": "System Integration",
        "description": "Support for MCP protocol and various external devices, enabling complete intelligent ecosystem"
      }
    },
    "links": {
      "documentation": "Full Documentation",
      "community": "Community Support",
      "contact": "Contact Us"
    },
    "footer": {
      "license": "Apache 2.0 Open Source License"
    },
    "gettingStarted": "Getting Started",
    "features": "Features",
    "maintenance": "Maintenance",
    "usage": "Usage"
  },
  "knowledge": {
    "title": "Knowledge Management",
    "importTitle": "Import Knowledge Files",
    "importTab": "Import",
    "browseTab": "Browse",
    "statsTab": "Statistics",
    "selectFiles": "Select Files",
    "supportedFormats": "Supported formats",
    "formatsJSON": "JSON",
    "formatsTXT": "Text",
    "formatsPDF": "PDF",
    "formatsDOCX": "Word DOCX",
    "selectedFiles": "Selected Files",
    "domain": "Domain",
    "autoDetect": "Auto Detect",
    "overwriteExisting": "Overwrite existing content",
    "startImport": "Start Import",
    "importing": "Importing...",
    "importResults": "Import Results",
    "importSuccess": "Import successful",
    "importError": "Import failed",
    "importSuccessDetail": "Successfully imported {length} characters",
    "unknownError": "Unknown error occurred",
    "uploadError": "File upload error",
    "importStatistics": "Import Statistics",
    "totalFiles": "Total Files",
    "successful": "Successful",
    "failed": "Failed",
    "totalSize": "Total Size",
    "searchPlaceholder": "Search knowledge...",
    "allDomains": "All Domains",
    "search": "Search",
    "searchResults": "Search Results",
    "source": "Source",
    "noResults": "No results found",
    "knowledgeStatistics": "Knowledge Statistics",
    "loading": "Loading",
    "totalDomains": "Total Domains",
    "totalItems": "Total Items",
    "byDomain": "By Domain",
    "items": "items",
    "lastUpdated": "Last Updated",
    "domains": {
      "physics": "Physics",
      "mathematics": "Mathematics",
      "chemistry": "Chemistry",
      "biology": "Biology",
      "computer_science": "Computer Science",
      "medicine": "Medicine",
      "law": "Law",
      "economics": "Economics",
      "general": "General"
    }
  },
  "monitor": {
    "title": "Real-time Monitoring Dashboard",
    "systemMetrics": "System Metrics",
    "modelPerformance": "Model Performance",
    "resourceUsage": "Resource Usage",
    "taskExecution": "Task Execution",
    "realTimeData": "Real-time Data Stream",
    "refresh": "Refresh",
    "refreshing": "Refreshing...",
    "autoRefresh": "Auto Refresh",
    "systemStatus": "System Status",
    "activeModels": "Active Models",
    "cpuUsage": "CPU Usage",
    "memoryUsage": "Memory Usage",
    "modelMetrics": "Model Metrics",
    "performanceCharts": "Performance Charts",
    "cpuMemoryChart": "CPU/Memory Chart",
    "modelPerformanceChart": "Model Performance Chart",
    "chartPlaceholder": "Chart visualization area",
    "status": {
      "normal": "Normal",
      "warning": "Warning",
      "critical": "Critical"
    },
    "metrics": {
      "accuracy": "Accuracy",
      "latency": "Latency",
      "throughput": "Throughput",
      "errorRate": "Error Rate"
    },
    "eventTypes": {
      "processing": "Processing",
      "success": "Success",
      "error": "Error",
      "training": "Training",
      "update": "Update",
      "coordination": "Coordination"
    },
    "uptime": "Uptime",
    "totalModels": "Total Models"
  },
    "modelManagement": {
        "title": "Model Management",
        "totalModels": "Total Models",
        "activeModels": "Active Models",
        "externalModels": "External Models",
        "modelMode": "Model Mode",
        "localMode": "Local Mode",
        "externalMode": "External Mode",
        "modelSource": "Model Source",
        "localModel": "Local Model",
        "externalModel": "External Model",
        "endpoint": "API Endpoint",
        "endpointPlaceholder": "Please enter API endpoint",
        "apiKey": "API Key",
        "apiKeyPlaceholder": "Please enter API key",
        "modelName": "Model Name",
        "modelNamePlaceholder": "Please enter model name",
        "testConnection": "Test Connection",
        "saveConfig": "Save Configuration",
        "connecting": "Connecting...",
        "connectionSuccess": "Connection successful",
        "connectionFailed": "Connection failed",
        "connectionError": "Connection error",
        "configSaved": "Configuration saved",
        "configSavedMessage": "{model} configuration saved",
        "start": "Start",
        "stop": "Stop",
        "restart": "Restart",
        "modelStarted": "Model started",
        "modelStartedMessage": "{model} started successfully",
        "startFailed": "Start failed",
        "startFailedMessage": "{model} failed to start",
        "modelStopped": "Model stopped",
        "modelStoppedMessage": "{model} stopped successfully",
        "stopFailed": "Stop failed",
        "stopFailedMessage": "{model} failed to stop",
        "performance": "Performance Metrics",
        "cpuUsage": "CPU Usage",
        "memoryUsage": "Memory Usage",
        "responseTime": "Response Time",
        "batchOperations": "Batch Operations",
        "startAll": "Start All",
        "stopAll": "Stop All",
        "restartAll": "Restart All"
    },
  "models": {
    "A": "Manager Model",
    "B": "Language Model",
    "C": "Audio Model",
    "D": "Image Vision Model",
    "E": "Video Vision Model",
    "F": "Spatial Model",
    "G": "Sensor Model",
    "H": "Computer Control Model",
    "I": "Motion Control Model",
    "J": "Knowledge Model",
    "K": "Programming Model",
    "manager": "Manager Model",
    "language": "Language Model",
    "audio": "Audio Model",
    "image": "Image Vision Model",
    "video": "Video Vision Model",
    "image_vision": "Image Vision Model",
    "video_vision": "Video Vision Model",
    "spatial": "Spatial Model",
    "stereo_spatial": "Stereo Spatial Model",
    "sensor": "Sensor Model",
    "computer": "Computer Control Model",
    "motion": "Motion Control Model",
    "knowledge": "Knowledge Model",
    "programming": "Programming Model"
  },
  "errors": {
    "selectAtLeastOneModel": "Please select at least one model for training",
    "datasetUploadFailed": "Dataset upload failed: {error}",
    "trainingStartFailed": "Training start failed: {error}",
    "noActiveTraining": "No active training to stop",
    "trainingStopFailed": "Training stop failed: {error}",
    "websocketError": "WebSocket error: {error}",
    "websocketConnectionFailed": "WebSocket connection failed: {error}",
    "backendConnectionFailed": "Backend connection failed",
    "backendNotConnected": "Backend service not connected",
    "fileTooLarge": "File too large, please select a file smaller than 5MB",
    "httpConnectionFailed": "HTTP connection failed",
    "imageInputNotFound": "Image input element not found",
    "imageUploadFailed": "Image upload failed",
    "loadMessagesFailed": "Failed to load message history",
    "processingFailed": "Processing failed",
    "voiceRecognitionFailed": "Voice recognition failed",
    "voiceRecognitionNotAvailable": "Voice recognition not available"
  },
  "common": {
    "loading": "Loading...",
    "error": "Error",
    "success": "Success",
    "save": "Save",
    "cancel": "Cancel",
    "delete": "Delete",
    "edit": "Edit",
    "back": "Back"
  },
  "home": {
    "welcomeMessage": "Welcome to Self Soul  AGI System! I am your intelligent assistant, capable of processing text, voice, images, and other multimodal inputs.",
    "backendConnected": "Backend service connected successfully, system is ready",
    "voiceRecognitionStarted": "Voice recognition started, please start speaking...",
    "uploadingImage": "Uploading image",
    "modelStatus": "Model Status",
    "performance": "Performance",
    "conversation": "Conversation",
    "typeMessage": "Please enter a message...",
    "send": "Send",
    "voiceInput": "Voice Input",
    "recording": "Recording",
    "connected": "Connected",
    "disconnected": "Disconnected",
    "imageInput": "Image Input",
    "showRealtime": "Show Real-time Input",
    "hideRealtime": "Hide Real-time Input",
    "quickActions": "Quick Actions"
  },
  "error": {
    "loadMessagesFailed": "Failed to load message history",
    "websocketConnectionFailed": "WebSocket connection failed",
    "httpConnectionFailed": "HTTP connection failed",
    "processingFailed": "Processing failed",
    "backendNotConnected": "Backend service not connected",
    "voiceRecognitionFailed": "Voice recognition failed",
    "voiceRecognitionNotAvailable": "Voice recognition not available",
    "imageInputNotFound": "Image input element not found",
    "fileTooLarge": "File too large, please select a file smaller than 5MB",
    "backendConnectionFailed": "Backend connection failed",
    "imageUploadFailed": "Image upload failed"
  },
  "mock": {
    "responsePrefix": "Received your message",
    "imageResponse": "Image received, analyzing and processing...",
    "defaultResponse": "Your input has been received and is being processed..."
  },
  "voice": {
    "listening": "Listening...",
    "command_recognized": "Voice command recognized: {command}",
    "recognition_error": "Voice recognition error: {error}",
    "recognition_ended": "Voice recognition ended"
  },
  "train": {
    "requiresModels": "Requires models: {models}",
    "missingDependencies": "Missing dependencies: {details}",
    "uploadDataset": "Upload Dataset",
    "dropoutRate": "Dropout Rate",
    "weightDecay": "Weight Decay",
    "momentum": "Momentum",
    "optimizer": "Optimizer",
    "knowledgeAssist": "Knowledge Assist",
    "knowledgeAssistOptions": "Knowledge Assist Options",
    "domainKnowledge": "Domain Knowledge",
    "commonSense": "Common Sense",
    "proceduralKnowledge": "Procedural Knowledge",
    "contextualLearning": "Contextual Learning",
    "knowledgeIntensity": "Knowledge Intensity",
    "logs": "Logs",
    "epochCompleted": "Epoch completed - Epoch: {epoch}, Loss: {loss}, Accuracy: {accuracy}%",
    "trainingStarted": "Training started - Mode: {mode}, Models: {models}, Dataset: {dataset}",
    "trainingCompleted": "Training completed successfully",
    "trainingStopped": "Training stopped",
    "recommendationsLoaded": "Recommendations loaded",
    "foundCombinations": "Found {count} recommended combinations",
    "loadRecommendations": "Load Recommendations",
    "loadRecommendationsFailed": "Failed to load recommendations",
    "started": "Started",
    "jobStarted": "Job started - Job ID: {jobId}",
    "startFailed": "Start failed",
    "failed": "Failed",
    "trainingFailed": "Training failed",
    "missingConfig": "Missing configuration",
    "websocketConnected": "WebSocket connection established",
    "websocketDisconnected": "WebSocket connection disconnected",
    "evaluation": "Evaluation",
    "accuracy": "Accuracy",
    "loss": "Loss",
    "precision": "Precision",
    "recall": "Recall",
    "confusionMatrix": "Confusion Matrix",
    "history": "History",
    "date": "Date",
    "models": "Models",
    "duration": "Duration",
    "actions": "Actions",
    "view": "View",
    "compare": "Compare",
    "dependencies": "Model Dependencies",
    "strategy": "Strategy",
    "strategyAdaptive": "Adaptive Strategy",
    "strategyKnowledge": "Knowledge Strategy",
    "strategyProgressive": "Progressive Strategy",
    "strategyStandard": "Standard Strategy",
    "trainingOptions": "Training Options",
    "trainingTime": "Training Time",
    "performanceMetrics": "Performance Metrics"
  },
  "training": {
    "title": "Training Control Panel",
    "trainingMode": "Training Mode",
    "individual": "Individual Training",
    "joint": "Joint Training",
    "selectModels": "Select Models for Training",
    "recommendedCombinations": "Recommended Combinations",
    "combinationValid": "Combination validated",
    "dependencies": "Model Dependencies",
    "trainingStrategy": "Training Strategy",
    "trainingOptions": "Training Options",
    "strategy": "Strategy",
    "strategyStandard": "Standard Strategy",
    "strategyKnowledge": "Knowledge Strategy",
    "strategyProgressive": "Progressive Strategy",
    "strategyAdaptive": "Adaptive Strategy",
    "knowledgeAssist": "Knowledge Assist",
    "knowledgeAssistOptions": "Knowledge Assist Options",
    "domainKnowledge": "Domain Knowledge",
    "commonSense": "Common Sense",
    "proceduralKnowledge": "Procedural Knowledge",
    "contextualLearning": "Contextual Learning",
    "knowledgeIntensity": "Knowledge Intensity",
    "dataset": "Dataset",
    "uploadDataset": "Upload Dataset",
    "parameters": "Parameters",
    "epochs": "Epochs",
    "batchSize": "Batch Size",
    "learningRate": "Learning Rate",
    "validationSplit": "Validation Split",
    "startTraining": "Start Training",
    "trainingInProgress": "Training in Progress",
    "stopTraining": "Stop Training",
    "progress": "Progress",
    "logs": "Logs",
    "evaluation": "Evaluation",
    "accuracy": "Accuracy",
    "loss": "Loss",
    "precision": "Precision",
    "recall": "Recall",
    "confusionMatrix": "Confusion Matrix",
    "history": "History",
    "date": "Date",
    "models": "Models",
    "duration": "Duration",
    "actions": "Actions",
    "view": "View",
    "compare": "Compare",
    "trainingCompleted": "Training completed successfully",
    "trainingStopped": "Training stopped",
    "trainingTime": "Training Time",
    "performanceMetrics": "Performance Metrics",
    "loadRecommendations": "Load Recommendations",
    "datasets": {
      "multimodal_v1": "Multimodal Dataset v1",
      "language_only": "Language Only Dataset",
      "vision_only": "Vision Only Dataset",
      "sensor_only": "Sensor Only Dataset"
    },
    "strategies": {
      "standard": "Standard Strategy",
      "knowledge_assisted": "Knowledge Assisted Strategy",
      "progressive": "Progressive Strategy",
      "adaptive": "Adaptive Strategy"
    },
    "combinations": {
      "basic_interaction": "Basic Interaction Combination",
      "visual_processing": "Visual Processing Combination",
      "sensor_analysis": "Sensor Analysis Combination",
      "knowledge_intensive": "Knowledge Intensive Combination",
      "specialized_domains": "Specialized Domains Combination",
      "emotional_intelligence": "Emotional Intelligence Combination",
      "complete_system": "Complete System Combination",
      "autonomous_control": "Autonomous Control Combination",
      "cognitive_processing": "Cognitive Processing Combination",
      "multimodal_perception": "Multimodal Perception Combination"
    },
    "requiresModels": "Requires models: {models}",
    "missingDependencies": "Missing dependencies: {details}",
    "websocketConnected": "WebSocket connection established",
    "websocketDisconnected": "WebSocket connection disconnected",
    "trainingStarted": "Training started - Mode: {mode}, Models: {models}, Dataset: {dataset}",
    "epochCompleted": "Epoch completed - Epoch: {epoch}, Loss: {loss}, Accuracy: {accuracy}%",
    "datasetUploadSuccess": "Dataset uploaded successfully: {name}",
    "dropoutRate": "Dropout Rate",
    "weightDecay": "Weight Decay",
    "momentum": "Momentum",
    "optimizer": "Optimizer",
    "apiKey": "API Key",
    "connecting": "Connecting...",
    "endpoint": "API Endpoint",
    "externalModel": "External Model",
    "jobStarted": "Job started",
    "localModel": "Local Model",
    "missingConfig": "Missing configuration",
    "modelName": "Model Name",
    "modelSource": "Model Source",
    "started": "Started",
    "testConnection": "Test Connection"
  },
  "dashboard": {
    "realTimeMonitoring": "Real-time Monitoring",
    "pause": "Pause",
    "resume": "Resume",
    "systemOverview": "System Overview",
    "activeTraining": "Active Training",
    "epoch": "Epoch",
    "loss": "Loss",
    "accuracy": "Accuracy",
    "elapsedTime": "Elapsed Time",
    "viewDetails": "View Details",
    "stopTraining": "Stop Training",
    "modelPerformance": "Model Performance",
    "responseTime": "Response Time",
    "successRate": "Success Rate",
    "memoryUsage": "Memory Usage",
    "trainingProgress": "Training Progress",
    "detailedModelMetrics": "Detailed Model Metrics",
    "cpuUsage": "CPU Usage",
    "throughput": "Throughput",
    "modelCollaboration": "Model Collaboration",
    "activeCollaborations": "Active Collaborations",
    "collaborationEfficiency": "Collaboration Efficiency",
    "dataTransferRate": "Data Transfer Rate",
    "realtimeData": "Real-time Data",
    "systemLogs": "System Logs",
    "modelActivities": "Model Activities",
    "trainingEvents": "Training Events",
    "emotionState": "Emotion State",
    "valence": "Valence",
    "arousal": "Arousal",
    "dominance": "Dominance",
    "websocketStatus": "WebSocket Status",
    "connection": "Connection",
    "messagesReceived": "Messages Received",
    "lastMessage": "Last Message",
    "collaborationIntensity": "Collaboration Intensity",
    "dataFlow": "Data Flow",
    "connected": "Connected",
    "disconnected": "Disconnected",
    "error": "Error",
    "activeJobs": "Active Jobs",
    "autoRefresh": "Auto Refresh",
    "collaborationNetwork": "Collaboration Network",
    "collaborationVisualization": "Collaboration Visualization",
    "completed": "Completed",
    "completedJobs": "Completed Jobs",
    "connectionError": "Connection Error",
    "customRange": "Custom Range",
    "duration": "Duration",
    "every30Seconds": "Every 30 Seconds",
    "every5Minutes": "Every 5 Minutes",
    "every5Seconds": "Every 5 Seconds",
    "everyMinute": "Every Minute",
    "exportData": "Export Data",
    "f1Score": "F1 Score",
    "failed": "Failed",
    "failedJobs": "Failed Jobs",
    "gpuUsage": "GPU Usage",
    "jobID": "Job ID",
    "last24Hours": "Last 24 Hours",
    "last6Hours": "Last 6 Hours",
    "last7Days": "Last 7 Days",
    "lastHour": "Last Hour",
    "latency": "Latency",
    "modelConnections": "Model Connections",
    "modelMetrics": "Model Metrics",
    "models": "Models",
    "networkUsage": "Network Usage",
    "noActiveTraining": "No Active Training",
    "paused": "Paused",
    "performanceTrends": "Performance Trends",
    "precision": "Precision",
    "recall": "Recall",
    "reconnecting": "Reconnecting",
    "refreshData": "Refresh Data",
    "resourceUsage": "Resource Usage",
    "running": "Running",
    "startTime": "Start Time",
    "status": "Status",
    "taskDistribution": "Task Distribution",
    "trainingCompleted": "Training Completed",
    "trainingFailed": "Training Failed",
    "trainingJobs": "Training Jobs",
    "trainingPaused": "Training Paused",
    "trainingResumed": "Training Resumed"
  }
}
